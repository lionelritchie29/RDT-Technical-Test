@page "/manage/schedules/{id}/update"

@using RDT_WEB_LL.Services
@using RDT_WEB_LL.Models
@using Microsoft.AspNetCore.Identity

@inject IParticipantService participantService
@inject IScheduleService scheduleService
@inject IJSRuntime JS
@inject NavigationManager navigationManager



<h3>Update Schedule for @user.UserName</h3>

<div class="card primary-bg-dark">
    <div class="card-body">
        <form @onsubmit=@OnUpdateSchedule>
            <div class="form-group">
                <label>Participant</label>
                <select class="form-control" disabled>
                    <option value="">@user.UserName</option>
                </select>
            </div>

            <div class="form-group">
                <label>Start date and time</label>
                <SfDateTimePicker TValue="DateTime" Min="@DateTime.Now.AddMinutes(30)" Value=@StartDate ValueChanged="@(t => StartDate = t)" Placeholder="Choose a date time"></SfDateTimePicker>
            </div>

            <div class="form-group">
                <label>End date and time</label>
                <SfDateTimePicker TValue="DateTime" Min="@DateTime.Now.AddHours(3)" Value="@EndDate" ValueChanged="@(t => EndDate = t)" Placeholder="Choose a date time"></SfDateTimePicker>
            </div>

            <div class="d-flex justify-content-end">
                <input type="submit" class="btn btn-primary" value="Update schedule" />
            </div>
        </form>
    </div>
</div>

@code {
    [Parameter]
    public string Id { get; set; }
    public Schedule schedule { get; set; }
    public IdentityUser user { get; set; }

    public DateTime StartDate { get; set; }
    public DateTime EndDate { get; set; }

    protected override void OnInitialized()
    {
        schedule = scheduleService.Get(int.Parse(Id));
        user = participantService.GetParticipantById(schedule.UserId);

        StartDate = schedule.startDate;
        EndDate = schedule.endDate;
    }

    private async void OnUpdateSchedule()
    {
        if (Validate())
        {
            schedule.startDate = StartDate;
            schedule.endDate = EndDate;
            int status = scheduleService.Update(schedule);
            if (status > 0)
            {
                await JS.InvokeVoidAsync("alert", "Update success!");
                navigationManager.NavigateTo("manage/schedules");
            } else
            {
                await JS.InvokeVoidAsync("alert", "Oops! something is wrong when updating answer");
            }
        } else
        {
            await JS.InvokeVoidAsync("alert", "Start date must be earlier than end date");
        }
    }

    private bool Validate()
    {
        if (DateTime.Compare(StartDate, EndDate) > 0) return false;
        return true;
    }
}
