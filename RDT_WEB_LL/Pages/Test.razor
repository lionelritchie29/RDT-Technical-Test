@page "/test"

@attribute [Authorize(Roles = "Admin, Participant")]
@inject IQuestionServices questionService
@inject RDT_WEB_LL.Data.ApplicationDbContext context
@inject IJSRuntime JS 
@inject IAuthService authService 

@using RDT_WEB_LL.Services
@using RDT_WEB_LL.Components
@using RDT_WEB_LL.Models 

<h3>Nationality test</h3>

<section class="container-fluid">
    <form>
        @for (var i = 0; i < questions.Count(); i++)
        {
            var j = i;
            int idx = AddNewAnswerToList(questions[i].Id);
            <QuestionCard question=@questions[j]>
                <p>@(j+1).  @questions[j].QuestionText</p>
                <QuestionCardAnswer question=@questions[j] @bind-userAnswer=@userAnswers[idx]></QuestionCardAnswer>
            </QuestionCard>
        }

        <div class="d-flex justify-content-end mb-5">
            <button type="submit" class="btn btn-success" @onclick=@OnSubmit>Submit my answer</button>
        </div>
    </form>
</section>

@code {
    public List<RDT_WEB_LL.Models.Question> questions { get; set; }
    public List<UserAnswer> userAnswers { get; set; }

    protected override void OnInitialized()
    {
        questions = questionService.GetAll();
        userAnswers = new List<UserAnswer>();
    }

    private int AddNewAnswerToList(int questionid)
    {
        userAnswers.Add(new UserAnswer { UserId = authService.GetCurrentUserId(), QuestionId = questionid, IsCorrect = false });
        int insertedIdx = userAnswers.Count - 1;
        return insertedIdx;
    }

    private async void OnSubmit()
    {
        JS.InvokeVoidAsync("alert", userAnswers[5].Answer);
    }
}
