@page "/test"

@attribute [Authorize(Roles = "Participant")]

@using System.Threading

@inject IQuestionServices questionService
@inject IAuthService authService
@inject IScheduleService scheduleService
@inject NavigationManager navManager
@inject IJSRuntime JS

@using RDT_WEB_LL.Services
@using RDT_WEB_LL.Components
@using RDT_WEB_LL.Models

@if (questions == null)
{
    <Loading></Loading>
}
else
{
    <div class="d-flex justify-content-between">
        <h3>Nationality test</h3>
        <div>
            <ServerTime @ref="serverTimeComponent" />
        </div>
    </div>

    <section class="container-fluid">
        <form>
            @for (var i = 0; i < questions.Count(); i++)
            {
                var j = i;
                int idx = AddNewAnswerToList(questions[j].Id);
                <QuestionCard question=@questions[j]>
                    <p>@(j+1).  @questions[j].QuestionText</p>
                    <QuestionCardAnswer question=@questions[j] @bind-userAnswer=@userAnswers[idx]></QuestionCardAnswer>
                </QuestionCard>
            }

            <div class="d-flex justify-content-end mb-5">
                <button type="submit" class="btn btn-success" @onclick=@OnSubmit @onclick:preventDefault="true">Submit my answer</button>
            </div>
        </form>
    </section>
}

@code {
    public List<RDT_WEB_LL.Models.Question> questions { get; set; }
    public List<UserAnswer> userAnswers { get; set; }
    private ServerTime serverTimeComponent;

    protected override async Task OnInitializedAsync()
    {
        var isAuthenticated = await Authenticate();
        if (isAuthenticated)
        {
            questions = await questionService.GetAll();
            userAnswers = new List<UserAnswer>();
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "You are not authorized or not eligible to take the test");
            navManager.NavigateTo("");
        }
    }

    private async Task<bool> Authenticate()
    {
        var currentUserId = authService.GetCurrentUserId();
        if (currentUserId == null)
        {
            return false;
        }
        else
        {
            var schedule = await scheduleService.GetByUserId(currentUserId);
            var isEligible = await IsEligible(schedule);
            if (isEligible) return true;
            return false;
        }
    }

    private async Task<bool> IsEligible(RDT_WEB_LL.Models.Schedule schedule)
    {
        if (scheduleService.IsOnSchedule(schedule) == true && await scheduleService.IsTestTaken(schedule) == false) return true;
        return false;
    }

    private int AddNewAnswerToList(int questionid)
    {
        userAnswers.Add(new UserAnswer { UserId = authService.GetCurrentUserId(), QuestionId = questionid });
        int insertedIdx = userAnswers.Count - 1;
        return insertedIdx;
    }

    private async void OnSubmit()
    {
        await serverTimeComponent.timer.DisposeAsync();
        await questionService.SaveUserAnswers(userAnswers);
        await JS.InvokeVoidAsync("alert", "Succesfully saved answer");
        navManager.NavigateTo("");
    }
}
