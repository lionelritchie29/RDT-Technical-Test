@page "/manage/participants"

@using Microsoft.AspNetCore.Identity
@using RDT_WEB_LL.Services
@using RDT_WEB_LL.Models
@using RDT_WEB_LL.Components

@inject IParticipantService participantService
@inject IScheduleService scheduleService
@inject NavigationManager navManager
@inject IJSRuntime JS

@attribute [Authorize(Roles = "Admin")]

<h3>Manage Participants</h3>

@if (participants == null || schedules == null)
{
    <Loading></Loading>
}
else
{
    @for (var i = 0; i < participants.Count; i++)
    {
        var j = i;
        var participant = participants[j];

        <div class="card primary-bg-dark mb-3" @key=@participant>
            <div class="card-body d-flex justify-content-between">
                <div>@participant.UserName</div>
                <div class="d-flex">
                    @{ var schedule = GetScheduleByUserId(participant.Id); }
                    @if (schedule == null)
                    {
                        <p class="mr-3">Not scheduled yet</p>
                        <button class="btn btn-primary" @onclick="@(e => NavigateToSetSchedule())">Set Schedule</button>
                    }
                    else if (isTestTaken[j] == true)
                    {
                        <button class="btn btn-primary mr-3" @onclick="@(e => NavigateToStatusPage(participant.Id))">View test status</button>
                        <button class="btn btn-primary" @onclick="@(e => NavigateToResultPage(participant.Id))">View test results</button>
                    }
                    else
                    {
                        <p>Test not yet started or has already passed deadline.</p>
                    }
                    <button class="btn btn-danger ml-3" @onclick="@(() => OnDelete(participant))">Delete</button>
                </div>
            </div>
        </div>
    }
}

@code {
    public List<IdentityUser> participants { get; set; }
    public List<Schedule> schedules { get; set; }
    private List<bool> isTestTaken { get; set; }

    protected override async Task OnInitializedAsync()
    {
        participants = await participantService.GetAll();
        schedules = await scheduleService.GetAll();

        isTestTaken = new List<bool>();
        for (int i = 0; i < participants.Count; i++)
        {
            var schedule = GetScheduleByUserId(participants[i].Id);
            bool result = await IsTestTaken(schedule);
            isTestTaken.Add(result);
        }
    }

    private Schedule GetScheduleByUserId(string userId)
    {
        return schedules.Find(s => s.UserId == userId);
    }

    private void NavigateToResultPage(string userId)
    {
        string url = $"manage/participants/{userId}/result";
        navManager.NavigateTo(url);
    }

    private void NavigateToStatusPage(string userId)
    {
        string url = $"manage/participants/{userId}/status";
        navManager.NavigateTo(url);
    }

    private void NavigateToSetSchedule()
    {
        string url = $"manage/schedules/add";
        navManager.NavigateTo(url);
    }

    private async Task<bool> IsTestTaken(Schedule schedule)
    {
        return (await scheduleService.IsTestTaken(schedule) == true && scheduleService.IsOnSchedule(schedule) == true) || (await scheduleService.IsTestTaken(schedule) == true && scheduleService.IsDone(schedule) == true);
    }

    private async void OnDelete(IdentityUser participant)
    {
        bool confirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure?");
        if (confirmed)
        {
            if (participant != null)
            {
                await JS.InvokeVoidAsync("console.log", participant);
                int status = await participantService.Delete(participant);
                if (status > 0)
                {
                    await JS.InvokeVoidAsync("alert", "Delete success");
                    participants.Remove(participant);
                    StateHasChanged();
                }
                else
                {
                    await JS.InvokeVoidAsync("alert", "Error when delete user");
                }
            }
        }
    }
}
