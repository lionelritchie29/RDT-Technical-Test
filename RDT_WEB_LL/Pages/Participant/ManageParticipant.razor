@page "/manage/participants"

@using Microsoft.AspNetCore.Identity
@using RDT_WEB_LL.Services
@using RDT_WEB_LL.Models

@inject IParticipantService participantService
@inject IScheduleService scheduleService
@inject NavigationManager navManager 

@attribute [Authorize(Roles = "Admin")]

<h3>Manage Participants</h3>

@foreach (var participant in participants)
{
<div class="card primary-bg-dark mb-3">
    <div class="card-body d-flex justify-content-between">
        <div>@participant.UserName</div>
        <div class="d-flex">
            @{ var schedule = GetScheduleByUserId(participant.Id); }
            @if (schedule == null)
            {
                <p>Not scheduled yet</p>
            }
            else if (IsScheduleTaken(schedule) == true)
            {
                <button class="btn btn-primary mr-3" @onclick="@(e => NavigateToStatusPage(participant.Id))">View test status</button>
                <button class="btn btn-primary" @onclick="@(e => NavigateToResultPage(participant.Id))">View test results</button>
            }
            else
            {
                <p>Test not yet started or has already passed deadline.</p>
            }
        </div>
    </div>
</div>
}

@code {
    public List<IdentityUser> participants { get; set; }
    public List<Schedule> schedules { get; set; }

    protected override void OnInitialized()
    {
        participants = participantService.GetAll();
        schedules = scheduleService.GetAll();
    }

    private Schedule GetScheduleByUserId(string userId)
    {
        return schedules.Find(s => s.UserId == userId);
    }

    private void NavigateToResultPage(string userId)
    {
        string url = $"manage/participants/{userId}/result";
        navManager.NavigateTo(url);
    }

    private void NavigateToStatusPage(string userId)
    {
        string url = $"manage/participants/{userId}/status";
        navManager.NavigateTo(url);
    }

    private bool IsScheduleTaken(Schedule schedule)
    {
        return (scheduleService.IsTestTaken(schedule) == true && scheduleService.IsOnSchedule(schedule) == true)  || (scheduleService.IsTestTaken(schedule) == true && scheduleService.IsDone(schedule) == true);
    }
}
