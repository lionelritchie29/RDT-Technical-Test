@page "/manage/participants/{id}/result"

@using RDT_WEB_LL.Services
@using RDT_WEB_LL.Models
@using RDT_WEB_LL.Components
@using Microsoft.AspNetCore.Identity

@inject IQuestionServices questionService
@inject IParticipantService participantService
@inject NavigationManager navManager

@attribute [Authorize(Roles = "Admin")]

<div class="d-flex justify-content-between mb-4">
    <h3>Answer Status of @user.NormalizedUserName</h3>
    <div>
        <button class="btn btn-primary" @onclick=@OnViewStatus>View answer status</button>
    </div>
</div>

<h4 class="mt-4">Result</h4>
<div class="jumbotron mb-4 @(GetResultClass())">
    <h1 class="display-4">@(GetResultStatus())</h1>
    <hr class="my-2">
    <p>@(GetResultStatusDetail())</p>
</div>

<h4 class="mt-4">Result detail</h4>
<ul class="list-group mb-5">
    <li class="list-group-item primary-bg-dark">Correct answers: <span class="text-success">@correctAnswerCount</span></li>
    <li class="list-group-item primary-bg-dark">Wrong answers: <span class="text-danger">@wrongAnswerCount</span></li>
    <li class="list-group-item primary-bg-dark d-flex justify-content-between">
        <div>Not verified answers: <span class="text-info">@notVerifiedAnswerCount</span></div>
        <div>
            @if (notVerifiedAnswerCount > 0)
            {
                <NavLink class="btn btn-primary" href="@(GetStatusUrl())" Match="NavLinkMatch.All">
                    Verify answer
                </NavLink>
            }
        </div>
    </li>
    <li class="list-group-item primary-bg-dark">Final result: @(ShowScore()) <span class="badge badge-pill badge-success">@(ShowCorrectByTotalQuestionCount())</span></li>
</ul>

@code {
    [Parameter]
    public string Id { get; set; }

    public IdentityUser user { get; set; }
    public List<UserAnswer> answers { get; set; }

    public int questionCount { get; set; }
    public int correctAnswerCount { get; set; }
    public int wrongAnswerCount { get; set; }
    public int notVerifiedAnswerCount { get; set; }

    protected override void OnInitialized()
    {
        user = participantService.GetParticipantById(Id);
        answers = questionService.GetUserAnswers(Id);
        questionCount = answers.Count;
        wrongAnswerCount = answers.FindAll(ans => ans.IsCorrect == false).Count;
        correctAnswerCount = answers.FindAll(ans => ans.IsCorrect == true).Count;
        notVerifiedAnswerCount = answers.FindAll(ans => IsEssayOrFileUpload(answers.IndexOf(ans)) && ans.IsCorrect == null).Count;
    }

    private string GetResultStatus()
    {
        if (notVerifiedAnswerCount > 0) return "Not yet verified";
        else if (calculateScore() >= 60) return "Passed";
        else return "Failed";
    }

    private string GetResultStatusDetail()
    {
        if (notVerifiedAnswerCount > 0) return "Some answers need to be verified first, please verify ASAP";
        else if (calculateScore() >= 60) return "This participant passsed the test because his/her score is greater than or equals to 60";
        else return "This participant failed the test because his/her score is less than 60";
    }

    private string GetResultClass()
    {
        if (notVerifiedAnswerCount > 0) return "bg-secondary";
        else if (calculateScore() >= 60) return "bg-success";
        else return "bg-danger";
    }

    private string GetStatusUrl()
    {
        return $"manage/participants/{Id}/status";
    }

    private string SetBadgeColorClass(int ansIdx)
    {
        if (IsEssayOrFileUpload(ansIdx)) return "badge-secondary";
        return answers[ansIdx].IsCorrect == true ? "badge-success" : "badge-danger";
    }

    private string SetAnswerStatus(int ansIdx)
    {
        if (IsEssayOrFileUpload(ansIdx)) return "Need manual correction";
        return answers[ansIdx].IsCorrect == true ? "Correct" : "Wrong Answer";
    }

    private bool IsEssayOrFileUpload(int ansIdx)
    {
        int questionTypeId = answers[ansIdx].Question.QuestionTypeId;
        return questionTypeId == (int)QuestionTypeEnum.Essay || questionTypeId == (int)QuestionTypeEnum.FileUpload;
    }

    private string ShowCorrectByTotalQuestionCount()
    {
        return $"{correctAnswerCount} / {questionCount}";
    }

    private string ShowScore()
    {
        return $"Score: {calculateScore()}";
    }

    private double calculateScore()
    {
        return ((double)correctAnswerCount / (double)questionCount) * 100;
    }

    private void OnViewStatus()
    {
        string url = $"manage/participants/{Id}/status";
        navManager.NavigateTo(url);
    }

}
