@page "/manage/participants/{id}/result"

@using RDT_WEB_LL.Services
@using RDT_WEB_LL.Models
@using RDT_WEB_LL.Components

@inject IQuestionServices questionService

@attribute [Authorize(Roles = "Admin")]

<h3>Test result for @Id</h3>


<h4 class="mt-4">Result summary</h4>
<ul class="list-group mb-5">
    <li class="list-group-item primary-bg-dark">Correct answers: <span class="text-success">@correctAnswerCount</span></li>
    <li class="list-group-item primary-bg-dark">Wrong answers: <span class="text-danger">@wrongAnswerCount</span></li>
    <li class="list-group-item primary-bg-dark">Not verified answers: <span class="text-info">@notVerifiedAnswerCount</span></li>
    <li class="list-group-item primary-bg-dark">Final result: @(ShowScore()) <span class="badge badge-pill badge-success">@(ShowCorrectByTotalQuestionCount())</span></li>
</ul>

<h4 class="mt-4">Result detail</h4>
@for (int i = 1; i <= answers.Count; i++)
{
    var j = i;
    <AnswerResult answer=@answers[j-1] number=j answerCorrectStatusUpdated=@UpdateCount></AnswerResult>
}

@code {
    [Parameter]
    public string Id { get; set; }

    public List<UserAnswer> answers { get; set; }

    public int questionCount { get; set; }
    public int correctAnswerCount { get; set; }
    public int wrongAnswerCount { get; set; }
    public int notVerifiedAnswerCount { get; set; }

    protected override void OnInitialized()
    {
        answers = questionService.GetUserAnswers(Id);
        questionCount = answers.Count;
        wrongAnswerCount = answers.FindAll(ans => ans.IsCorrect == false).Count;
        correctAnswerCount = answers.FindAll(ans => ans.IsCorrect == true).Count;
        notVerifiedAnswerCount = answers.FindAll(ans => IsEssayOrFileUpload(answers.IndexOf(ans)) && ans.IsCorrect == null).Count;
    }

    private string SetBadgeColorClass(int ansIdx)
    {
        if (IsEssayOrFileUpload(ansIdx)) return "badge-secondary";
        return answers[ansIdx].IsCorrect == true ? "badge-success" : "badge-danger";
    }

    private string SetAnswerStatus(int ansIdx)
    {
        if (IsEssayOrFileUpload(ansIdx)) return "Need manual correction";
        return answers[ansIdx].IsCorrect == true ? "Correct" : "Wrong Answer";
    }

    private bool IsEssayOrFileUpload(int ansIdx)
    {
        int questionTypeId = answers[ansIdx].Question.QuestionTypeId;
        return questionTypeId == (int)QuestionTypeEnum.Essay || questionTypeId == (int)QuestionTypeEnum.FileUpload;
    }

    private string ShowCorrectByTotalQuestionCount()
    {
        return $"{correctAnswerCount} / {questionCount}";
    }

    private string ShowScore()
    {
        return $"Score: {((double) correctAnswerCount / (double) questionCount) * 100}";
    }

    private void UpdateCount(bool isCorrect)
    {
        if (isCorrect)
        {
            correctAnswerCount += 1;
        } else
        {
            wrongAnswerCount += 1;
        }
        notVerifiedAnswerCount -= 1;
    }
}
