@page "/manage/questions/{id}/update"

@using RDT_WEB_LL.Models
@using RDT_WEB_LL.Models.Form_Models
@using RDT_WEB_LL.Services
@using Microsoft.Extensions.Logging
@using RDT_WEB_LL.Components.Question_Form
@using RDT_WEB_LL.Components

@inject IJSRuntime JS
@inject IQuestionTypeService qtService
@inject IQuestionServices qService
@inject NavigationManager NavigationManager

@attribute [Authorize(Roles = "Admin")]

<h3>Update Question ID: @Id</h3>

<div class="card primary-bg-dark">
    <div class="card-body">
        @if (questionTypes == null)
        {
            <Loading></Loading>
        }
        else
        {
            <EditForm OnSubmit=@OnNext EditContext=@editContext>
                <ObjectGraphDataAnnotationsValidator />
                <div class="form-group">
                    <label>Question text</label>
                    <InputText class="form-control" @bind-Value=@model.QuestionText placeholder="Enter question" />
                    <ValidationMessage For="() => model.QuestionText" />
                </div>
                <div class="form-group">
                    <label>Question Type</label>
                    <InputSelect @bind-Value=@model.QuestionTypeId name="questionType" class="form-control">
                        <option value="" selected>---</option>
                        @foreach (var type in questionTypes)
                            {
                            <option value=@type.Id>@type.Type</option>
                            }
                    </InputSelect>
                    <ValidationMessage For="() => model.QuestionTypeId" />
                </div>

                @if (model.QuestionTypeId != null && IsNotEssayOrFileUpload() && !IsBoolean())
                {
                    <label>Possible Answer</label>
                    <div class="form-group">
                        @for (var i = 0; i < possibleAnswerInputcount; i++)
                        {
                            var j = i;
                            <div class="d-flex" @key=@j>
                                <InputText @bind-Value=@model.PossibleAnswers[j].Value class="form-control mb-2" placeholder="Enter possible answer" />
                                <div><button class="btn btn-outline-danger ml-3" @onclick="@(e => DeleteList(j))" @onclick:preventDefault="true">Delete</button></div>
                            </div>
                            <ValidationMessage For="() => model.PossibleAnswers[j].Value" />
                        }
                    </div>

                    <div class="d-flex justify-content-end">
                        <button class="btn btn-outline-primary" @onclick=@AddAnswerList @onclick:preventDefault="true">Add more</button>
                    </div>
                }


                <input type="submit" class="btn btn-primary" value="Next">
            </EditForm>
        }
    </div>
</div>

@if (IsSecondStep)
{
    <QuestionFormUpdateChooseCorrectAnswer Model=@model CorrectAnswerIdx=@correctAnswerIdx OnUpdateQuestion=@OnUpdateQuestion />
}

@code {
    [Parameter]
    public string Id { get; set; }
    public int correctAnswerIdx { get; set; }

    public EditContext editContext { get; set; }
    public Question question { get; set; }
    public int possibleAnswerInputcount = 0;
    AddQuestionFormModel model = new AddQuestionFormModel();

    public List<QuestionType> questionTypes = null;
    public bool IsSecondStep { get; set; } = false;

    private void EditContext_OnFieldChanged(object sender, FieldChangedEventArgs e)
    {
        if (e.FieldIdentifier.FieldName == "QuestionTypeId")
        {
            clearPossibleAnswerInput();
            if (IsNotEssayOrFileUpload() && !IsBoolean())
            {
                AddAnswerList();
            }
            IsSecondStep = false;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(Id)) return;

        questionTypes = await qtService.GetAll();
        question = await qService.Get(int.Parse(Id));
        FillInputField();

        editContext = new EditContext(model);
        editContext.OnFieldChanged += EditContext_OnFieldChanged;
    }

    private void FillInputField()
    {
        model.QuestionText = question.QuestionText;
        model.QuestionTypeId = question.QuestionTypeId.ToString();

        if (IsNotEssayOrFileUpload())
        {
            for (var i = 0; i < question.PossibleAnswers.Count; i++)
            {
                var j = i;
                var ans = question.PossibleAnswers[j];

                if (ans.IsCorrect == true) correctAnswerIdx = j;
                possibleAnswerInputcount++;
                model.PossibleAnswers.Add(new PossibleAnswerFormModel { Value = ans.Answer, IsCorrect = ans.IsCorrect });
            }
        }
    }

    private void AddAnswerList()
    {
        possibleAnswerInputcount++;
        model.PossibleAnswers.Add(new PossibleAnswerFormModel { Value = " " });
        JS.InvokeVoidAsync("console.log", model.PossibleAnswers.Count());
    }

    private void DeleteList(int idx)
    {
        if (possibleAnswerInputcount == 1) return;
        model.PossibleAnswers.RemoveAt(idx);
        possibleAnswerInputcount--;
    }

    private void OnNext(EditContext edt)
    {
        if (edt.Validate())
        {
            AddPossibleAnswerForBoolean();
            IsSecondStep = true;
        }
    }

    private void AddPossibleAnswerForBoolean()
    {
        if (IsBoolean())
        {
            model.PossibleAnswers.Add(new PossibleAnswerFormModel { Value = "False", IsCorrect = false });
            model.PossibleAnswers.Add(new PossibleAnswerFormModel { Value = "True", IsCorrect = false });
        }
    }

    private async void OnUpdateQuestion()
    {
        if (string.IsNullOrEmpty(model.QuestionTypeId)) return;
        var hasCorrectAnswer = IsNotEssayOrFileUpload();

        question.QuestionText = model.QuestionText;
        question.QuestionTypeId = int.Parse(model.QuestionTypeId);
        question.HasCorrectAnswer = hasCorrectAnswer;
        await qService.Update(question);

        List<PossibleAnswer> possibleAnswers = new List<PossibleAnswer>();
        if (hasCorrectAnswer)
        {
            foreach (var ans in model.PossibleAnswers)
            {
                possibleAnswers.Add(new PossibleAnswer { Answer = ans.Value, IsCorrect = ans.IsCorrect, QuestionId = question.Id });
            }
        }
        await qService.UpdateAnswers(possibleAnswers, question.Id);

        clearForm();
        IsSecondStep = false;
        await JS.InvokeVoidAsync("alert", "Succesfully updated this question");
        NavigationManager.NavigateTo("manage/questions");
    }

    private bool IsNotEssayOrFileUpload()
    {
        if (string.IsNullOrEmpty(model.QuestionTypeId)) return false;
        return int.Parse(model.QuestionTypeId) != (int)QuestionTypeEnum.Essay && int.Parse(model.QuestionTypeId) != (int)QuestionTypeEnum.FileUpload;
    }

    private void clearPossibleAnswerInput()
    {
        possibleAnswerInputcount = 0;
        model.PossibleAnswers.Clear();
    }

    private bool IsBoolean()
    {
        return int.Parse(model.QuestionTypeId) == (int)QuestionTypeEnum.Boolean;
    }

    private void clearForm()
    {
        model.QuestionText = "";
        model.QuestionTypeId = "";
        model.PossibleAnswers = new List<PossibleAnswerFormModel>();
    }
}

