@using RDT_WEB_LL.Models 
@using RDT_WEB_LL.Services

@inject IScheduleService scheduleService 
@inject NavigationManager navManager
@inject IJSRuntime JS

<div class="card primary-bg-dark mb-3">
    <div class="card-body">
        <div class="d-flex justify-content-between">
            <p>@schedule.User.UserName</p>

            <div>
                <span class="badge @(GetStatusBadgeClass(schedule))"> @(GetStatus(schedule)) </span>
            </div>
        </div>

        <ul class="list-group mt-3">
            <li class="list-group-item primary-bg-light-dark">Start date: @schedule.startDate</li>
            <li class="list-group-item primary-bg-light-dark">End date: @schedule.endDate</li>
        </ul>

        @if (ShouldShowUpdateDeleteBtn(schedule))
        {
            <div class="mt-3 d-flex justify-content-end">
                <button class="btn btn-primary mr-3" @onclick=@OnUpdate>Update</button>
                <button class="btn btn-danger" @onclick=OnDelete>Delete</button>
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public Schedule schedule { get; set; }

    [Parameter]
    public EventCallback<Schedule> OnDeleteCallback { get; set; }

    private ScheduleStatus status = new ScheduleStatus
    {
        IsNotStarted = "Not yet started",
        OnGoingAndNotTaken = "On going and not yet taken",
        OnGoingAndTaken = "On going and has been taken",
        PassDeadlineAndTaken = "Passed deadline and has been taken",
        PassDeadlineAndNotTaken = "Passed deadline but not yet taken"
    };

    private ScheduleStatus statusClass = new ScheduleStatus
    {
        IsNotStarted = "badge-secondary",
        OnGoingAndNotTaken = "badge-primary",
        OnGoingAndTaken = "badge-success",
        PassDeadlineAndTaken = "badge-success",
        PassDeadlineAndNotTaken = "badge-danger"
    };

    private bool ShouldShowUpdateDeleteBtn(Schedule schedule)
    {
        return scheduleService.IsNotStarted(schedule) == true || (scheduleService.IsOnSchedule(schedule) == true && scheduleService.IsTestTaken(schedule) == false);
    }

    private string GetStatus(Schedule schedule)
    {
        return scheduleService.GetStatus(schedule, status);
    }

    private string GetStatusBadgeClass(Schedule schedule)
    {
        return scheduleService.GetStatus(schedule, statusClass);
    }

    private async void OnDelete()
    {
        bool confirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure want to delete this schedule ?");
        if (confirmed)
        {
            await OnDeleteCallback.InvokeAsync(schedule);
            int status = scheduleService.Delete(schedule);

            if (status > 0)
            {
                await JS.InvokeVoidAsync("alert", "Delete success");
            } else
            {
                await JS.InvokeVoidAsync("alert", "Delete failed");
            }

        }
    }

    private void OnUpdate()
    {
        string url = $"manage/schedules/{schedule.Id}/update";
        navManager.NavigateTo(url);
    }
}
