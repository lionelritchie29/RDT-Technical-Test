@using RDT_WEB_LL.Models 
@using RDT_WEB_LL.Services

@inject IScheduleService scheduleService 

<div class="card primary-bg-dark mb-3">
    <div class="card-body">
        <div class="d-flex justify-content-between">
            <p>@schedule.User.UserName</p>

            <div>
                <span class="badge @(GetStatusBadgeClass(schedule))"> @(GetStatus(schedule)) </span>
            </div>
        </div>

        <ul class="list-group mt-3">
            <li class="list-group-item primary-bg-light-dark">Start date: @schedule.startDate</li>
            <li class="list-group-item primary-bg-light-dark">End date: @schedule.endDate</li>
        </ul>

        @if (ShouldShowUpdateDeleteBtn(schedule))
        {
            <div class="mt-3 d-flex justify-content-end">
                <button class="btn btn-primary mr-3">Update</button>
                <button class="btn btn-danger">Delete</button>
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public Schedule schedule { get; set; }

    private bool ShouldShowUpdateDeleteBtn(Schedule schedule)
    {
        return scheduleService.IsNotStarted(schedule) == true || (scheduleService.IsOnSchedule(schedule) == true && scheduleService.IsTestTaken(schedule) == false);
    }

    private string GetStatus(Schedule schedule)
    {
        if (scheduleService.IsNotStarted(schedule) == true) return "Not yet started";
        else if (scheduleService.IsOnSchedule(schedule) == true && scheduleService.IsTestTaken(schedule) == true) return "On going and already taken";
        else if (scheduleService.IsOnSchedule(schedule) == true && !scheduleService.IsTestTaken(schedule) == true) return "On going but not yet taken";
        else if (scheduleService.IsDone(schedule) == true && !scheduleService.IsTestTaken(schedule) == false) return "Passed deadline but not yet taken";
        else if (scheduleService.IsDone(schedule) == true && scheduleService.IsTestTaken(schedule) == true) return "Passed deadline and already taken";
        return "";
    }

    private string GetStatusBadgeClass(Schedule schedule)
    {
        if (scheduleService.IsNotStarted(schedule) == true) return "badge-secondary";
        else if (scheduleService.IsOnSchedule(schedule) == true && scheduleService.IsTestTaken(schedule) == true) return "badge-success";
        else if (scheduleService.IsOnSchedule(schedule) == true && !scheduleService.IsTestTaken(schedule) == true) return "badge-primary";
        else if (scheduleService.IsDone(schedule) == true && !scheduleService.IsTestTaken(schedule) == false) return "badge-danger";
        else if (scheduleService.IsDone(schedule) == true && scheduleService.IsTestTaken(schedule) == true) return "badge-success";
        return "";
    }
}
